#+TITLE: Emacs Configuration
#+AUTHOR: Harshad Shirwadkar
#+FILETAGS: config

* Emacs Configuration                                         :quick:project:
  :LOGBOOK:
  CLOCK: [2021-08-12 Thu 10:03]
  :END:
  This is a project itself.

* Library Functions
  
  This section captures all the library functions that are defined in
  my config.

** Capture Frame function

#+BEGIN_SRC emacs-lisp
(defun make-capture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (org-capture)
  (delete-other-windows)
  )
#+END_SRC

** C Indentation functions

#+BEGIN_SRC emacs-lisp
(defun hs/c-indent/config-indent-80andNoTrail()
  (setq whitespace-line-column 80) ;; limit line length
  (setq whitespace-style '(face lines-tail))
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (setq show-trailing-whitespace t)
  )

(defun hs/c-indent/config-indent-linux()
  (setq c-default-style "linux")
  ;; Use TABs of length of 8
  (setq indent-tabs-mode 1
	tab-width 8
	c-basic-offset 8)
  )
#+END_SRC

** Org Mode Functions

#+BEGIN_SRC emacs-lisp
(defun hs/org-file-by-date ()
  "Create an Org file with current time as name."
  (find-file (format-time-string "~/org/journal/journal-%Y-%m.org")))

(defun hs/org-schedule-today ()
  "Schedule the current task to today."
  (interactive)
  (org-agenda-schedule 'nil (current-time)))

(defun hs/org-style-header (arg)
  "Stylize the header for org agenda."
  (concat
    (make-string (+ 2 (length arg)) ?=)
    "\n " arg " \n"
    (make-string (+ 2 (length arg)) ?=)
    "\n")
)

(defun hs/org-style-sub-header (arg)
  "Stylize the header for org agenda."
  (concat "\n** " arg " **\n")
)
#+END_SRC

* User Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Harshad Shirwadkar")
(setq user-mail-address "harshadshirwadkar@gmail.com")
#+END_SRC

* Basic Initial Configuration

#+BEGIN_SRC emacs-lisp
(setq package-check-signature 'nil)

(setq dotfiles-dir (file-name-directory
                    (or (buffer-file-name) load-file-name)))

;; Enable delete selection mode
(delete-selection-mode 1)

#+END_SRC

* Install Packages
** Generic Packages
  #+BEGIN_SRC emacs-lisp
  (defvar packages  '(
		  auto-complete
		  autopair
		  xcscope
		  gotham-theme
		  markdown-mode
		  company
		  ido-vertical-mode
		  org-mime
		  doom-themes
		  use-package
		  websocket
		  simple-httpd
		  )
    )

  (when (>= emacs-major-version 24)
    (require 'package)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
    )

  (when (not package-archive-contents) (package-refresh-contents))

  (dolist (p packages)
    (when (not (package-installed-p p))
      (package-refresh-contents)
      (package-install p)))

(setq create-lockfiles nil)


#+END_SRC
** Google Internal Packages
#+BEGIN_SRC emacs-lisp
(defun require-google-specific-packages ()
  (require 'compilation-colorization) ;; colorizes output of (i)grep
  (require 'rotate-clients)           ;; google-rotate-client
  (require 'rotate-among-files)       ;; google-rotate-among-files
  (require 'googlemenu)               ;; handy Google menu bar
  (require 'p4-files)                 ;; transparent support for Perforce filesystem
  (require 'google3)                  ;; magically set paths for compiling google3 code
  (require 'google3-build)            ;; support for blaze builds
  )
#+END_SRC

* Themes
  I generally prefer loading dark themes. But there are times when
  light theme makes sense. So, instead of changing config everytime,
  just check for file existence while loading theme. Terminal is
  always dark though.

   #+BEGIN_SRC emacs-lisp
   (if (display-graphic-p)
       (if (file-exists-p "~/.emacs-light")
	   (load-theme 'adwaita t)
	   (load-theme 'wombat t))
     (load-theme 'doom-molokai t)
     )
   #+END_SRC

* C Indentation
#+BEGIN_SRC emacs-lisp

;;; C indentation start ---------------
(add-hook 'c-mode-hook 'hs/c-indent/config-indent-linux)
(add-hook 'c-mode-common-hook 'hs/c-indent/config-indent-80andNoTrail)
(if (file-directory-p "/google/")
   (add-hook 'c-mode-common-hook '(lambda () (require 'google))))

;; For CamelCase Editing
(add-hook 'c-mode-common-hook
          (lambda () (subword-mode 1)))


#+END_SRC

* UI

#+BEGIN_SRC emacs-lisp
;;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (tooltip-mode -1)
  (mouse-wheel-mode t)
  (blink-cursor-mode -1))

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(ansi-color-for-comint-mode-on)

(setq visible-bell t
      echo-keystrokes 0.1
      font-lock-maximum-decoration t
      inhibit-startup-message t
      transient-mark-mode t
      color-theme-is-global t
      shift-select-mode nil
      mouse-yank-at-point t
      require-final-newline t
      truncate-partial-width-windows nil
      uniquify-buffer-name-style 'forward
      ediff-window-setup-function 'ediff-setup-windows-plain
      oddmuse-directory (concat dotfiles-dir "oddmuse")
      xterm-mouse-mode t
      save-place-file (concat dotfiles-dir "places"))

(add-to-list 'safe-local-variable-values '(lexical-binding . t))
(add-to-list 'safe-local-variable-values '(whitespace-line-column . 80))

(set-face-background 'vertical-border "white")
(set-face-foreground 'vertical-border "white")

#+END_SRC

* [[https://www.emacswiki.org/emacs/WinnerMode][Winner Mode]]
** Info
   This mode allows me to undo the window configuration.
** Configuration
#+BEGIN_SRC emacs-lisp
    (when (fboundp 'winner-mode)
      (winner-mode 1))
#+END_SRC

* Scrolling
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse~
(setq scroll-conservatively 100)
#+END_SRC

* Line and Column Numbers
** Info
   Enable Line Numbers and Column Numbers. This is enabled by three
   modes:
   - Line number mode: shows line numbers above mini-buffer
   - Column number mode: shows column numbers above mini-buffer
   - Linum mode: shows line numbers on the left hand side of the
     buffer
** Configuration
#+BEGIN_SRC emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
(autoload 'linum-mode "linum" "toggle line numbers on/off" t)
(if (display-graphic-p)
  (setq linum-format " %d")
  (setq linum-format "%4d | ")
  )

(global-linum-mode 1)
#+END_SRC    

* [[https://github.com/joaotavora/autopair][Autopair Mode]]

** Information from the Page

   Autopair is an extension to the Emacs text editor that
   automatically pairs braces and quotes:

   - Opening braces/quotes are autopaired;
   - Closing braces/quotes are autoskipped;
   - Backspacing an opening brace/quote autodeletes its pair.
   - Newline between newly-opened brace pairs open an extra indented
     line.

   Autopair works well across all Emacs major-modes, deduces from the
   language's syntax table which characters to pair, skip or
   delete. It should work even with extensions that redefine such
   keys. It also works with YASnippet, another package I maintain.

** SOMEDAY Use electric-pair mode instead of auto-pair mode

** Configuration

    #+BEGIN_SRC emacs-lisp
(require 'autopair)
(autopair-global-mode)
(setq autopair-autowrap t)
    #+END_SRC

* [[https://github.com/auto-complete/auto-complete][Auto-Complete Mode]]
** Information
   Auto-Complete is an intelligent auto-completion extension for
   Emacs. It extends the standard Emacs completion interface and
   provides an environment that allows users to concentrate more on
   their own work.
** Configurataion
   #+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories (concat dotfiles-dir "/extensions/auto-complete/ac-dict"))
(ac-config-default)
   #+END_SRC

* [[https://github.com/dkogan/xcscope.el][Cscope]]
*** Information
    The main cscope package
*** Config
    #+BEGIN_SRC emacs-lisp
(require 'xcscope)
    #+END_SRC
*** Key Bindings
    #+BEGIN_SRC emacs-lisp
;; Cscope
(global-set-key (kbd "\C-c s s") 'cscope-find-this-symbol)
(global-set-key (kbd "\C-c s d") 'cscope-find-global-definition)
(global-set-key (kbd "\C-c s g") 'cscope-find-global-definition)
(global-set-key (kbd "\C-c s G") 'cscope-find-global-definition-no-prompting)
(global-set-key (kbd "\C-c s c") 'cscope-find-functions-calling-this-function)
(global-set-key (kbd "\C-c s C") 'cscope-find-called-functions)
(global-set-key (kbd "\C-c s t") 'cscope-find-this-text-string)
(global-set-key (kbd "\C-c s e") 'cscope-find-egrep-pattern)
(global-set-key (kbd "\C-c s f") 'cscope-find-this-file)
(global-set-key (kbd "\C-c s i") 'cscope-find-files-including-file)
;; --- (The '---' indicates that this line corresponds to a menu separator.)
(global-set-key (kbd "\C-c s b") 'cscope-display-buffer)
(global-set-key (kbd "\C-c s B") 'cscope-display-buffer-toggle)
(global-set-key (kbd "\C-c s n") 'cscope-next-symbol)
(global-set-key (kbd "\C-c s N") 'cscope-next-file)
(global-set-key (kbd "\C-c s p") 'cscope-prev-symbol)
(global-set-key (kbd "\C-c s P") 'cscope-prev-file)
(global-set-key (kbd "\C-c s u") 'cscope-pop-mark)
;; ---
(global-set-key (kbd "\C-c s a") 'cscope-set-initial-directory)
(global-set-key (kbd "\C-c s A") 'cscope-unset-initial-directory)
;; ---
(global-set-key (kbd "\C-c s L") 'cscope-create-list-of-files-to-index)
(global-set-key (kbd "\C-c s I") 'cscope-index-files)
(global-set-key (kbd "\C-c s E") 'cscope-edit-list-of-files-to-index)
(global-set-key (kbd "\C-c s W") 'cscope-tell-user-about-directory)
(global-set-key (kbd "\C-c s S") 'cscope-tell-user-about-directory)
(global-set-key (kbd "\C-c s T") 'cscope-tell-user-about-directory)
(global-set-key (kbd "\C-c s D") 'cscope-dired-directory)
#+END_SRC

* [[https://www.emacswiki.org/emacs/HippieExpand][Hippie Expand Mode]]
** Information

   HippieExpand looks at the word before point and tries to expand it
   in various ways including expanding from a fixed list (like
   `‘expand-abbrev’’), expanding from matching text found in a buffer
   (like `‘dabbrev-expand’’) or expanding in ways defined by your own
   functions. Which of these it tries and in what order is controlled
   by a configurable list of functions.

** Configuration
  #+BEGIN_SRC emacs-lisp
;; Hippie expand: at times perhaps too hip
(delete 'try-expand-line hippie-expand-try-functions-list)
(delete 'try-expand-list hippie-expand-try-functions-list)
  #+END_SRC

* [[https://www.emacswiki.org/emacs/InteractivelyDoThings][Ido Mode]]

** Info

   The ido.el package by KimStorm lets you interactively do things
   with buffers and files. As an example, while searching for a file
   with C-x C-f, ido can helpfully suggest the files whose paths are
   closest to your current string, allowing you to find your files
   more quickly.

** Config
  
#+BEGIN_SRC emacs-lisp
;; ido-mode is like magic pixie dust!
(ido-mode t)
(setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess
        ido-max-prospects 10)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)

#+END_SRC

* [[https://github.com/creichert/ido-vertical-mode.el][Ido Vertical Mode]]
   #+BEGIN_SRC emacs-lisp
(ido-vertical-mode)
(setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
   #+END_SRC


* File Extension to Modes Mapping
#+BEGIN_SRC emacs-lisp
;; Associate modes with file extensions
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.js\\(on\\)?$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.xml$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC

* Diff Mode
#+BEGIN_SRC emacs-lisp
;; Default to unified diffs
(setq diff-switches "-u")

(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))
#+END_SRC

* Platform Specific Stuff
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  ;; Work around a bug on OS X where system-name is FQDN
  (setq system-name (car (split-string system-name "\\."))))

#+END_SRC

* Org Mode Config

** General Config
#+BEGIN_SRC emacs-lisp
(require 'org)

(require 'org-mouse)

(setq org-directory "~/org")
(setq org-default-notes-file "~/org/scribble.org")
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
(setq org-fontify-done-headline t)

; Set default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

; global Effort estimate values
; global STYLE property values for completion
(setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))
(setq org-enforce-todo-dependencies t)
(setq org-startup-indented t)
(setq org-cycle-separator-lines 1)
(setq org-blank-before-new-entry (quote ((heading)
                                         (plain-list-item . auto))))
(setq org-insert-heading-respect-content nil)
(setq org-reverse-note-order nil)
(setq org-show-following-heading t)
(setq org-show-hierarchy-above t)
(setq org-show-siblings (quote ((default))))
(setq org-special-ctrl-a/e t)
(setq org-special-ctrl-k t)
(setq org-yank-adjusted-subtrees t)
(setq org-id-method (quote uuidgen))
(setq org-deadline-warning-days 30)
(setq org-schedule-warning-days 30)
(setq org-link-frame-setup (quote ((vm . vm-visit-folder)
                                   (gnus . org-gnus-no-new-news)
                                   (file . find-file))))
; Use the current window for C-c ' source editing
(setq org-src-window-setup 'current-window)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

#+END_SRC

** Logging
   Logging of entries. On marking entries as done, also record the
   state change by mmodifying =org-log-note-headings= variable to
   reflect the state change. This allows such state changes to be
   tracked in weekly review.
#+BEGIN_SRC emacs-lisp
(setq org-log-done (quote note))
(setq org-log-note-headings '((done . "State %-12s from %-12S %t")
 (state . "State %-12s from %-12S %t")
 (note . "Note taken on %t")
 (reschedule . "Rescheduled from %S on %t")
 (delschedule . "Not scheduled, was %S on %t")
 (redeadline . "New deadline from %S on %t")
 (deldeadline . "Removed deadline, was %S on %t")
 (refile . "Refiled on %t")
 (clock-out . "")))
(setq org-log-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)
#+END_SRC

** Tags excluded from inheritance
#+BEGIN_SRC emacs-lisp
(setq org-tags-exclude-from-inheritance '("travel" "project"))
#+END_SRC

** Agenda Configuration
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (directory-files-recursively "~/org/" "\.org$"))
(add-to-list 'org-agenda-files "~/.emacs.d/configuration.org")

;;(setq org-agenda-overriding-header "======\nAgenda\n======\n")
(setq org-agenda-overriding-header (hs/org-style-header "This Week's Agenda"))
;; Compact the block agenda view
;; (setq org-agenda-compact-blocks nil)

;; ;; Limit restriction lock highlighting to the headline only
;; (setq org-agenda-restriction-lock-highlight-subtree nil)

;; ;; Keep tasks with dates on the global todo lists
;; (setq org-agenda-todo-ignore-with-date nil)

;; ;; Keep tasks with deadlines on the global todo lists
;; (setq org-agenda-todo-ignore-deadlines nil)

;; ;; Keep tasks with scheduled dates on the global todo lists
;; (setq org-agenda-todo-ignore-scheduled nil)

;; ;; Keep tasks with timestamps on the global todo lists
;; (setq org-agenda-todo-ignore-timestamp nil)

;; ;; Remove completed deadline tasks from the agenda view
;; (setq org-agenda-skip-deadline-if-done nil)

;; ;; Remove completed scheduled tasks from the agenda view
;; (setq org-agenda-skip-scheduled-if-done t)

;; ;; Remove completed items from search results
;; (setq org-agenda-skip-timestamp-if-done t)

;; (setq org-agenda-include-diary nil)

;; (setq org-agenda-insert-diary-extract-time t)

;; ;; Include agenda archive files when searching for things
;; (setq org-agenda-text-search-extra-files (quote (agenda-archives)))

;; ;; Show all future entries for repeating tasks
;; (setq org-agenda-repeating-timestamp-show-all t)

;; ;; Show all agenda dates - even if they are empty
;; (setq org-agenda-show-all-dates t)

(setq org-agenda-sorting-strategy '(time-up))


;; ;; Start the weekly agenda on Monday
;; (setq org-agenda-start-on-weekday 1)

;; ;; Enable display of the time grid so we can see the marker for the current time
;; ;; (setq org-agenda-time-grid (quote ((daily today remove-match)
;; ;;                                    #("----------------" 0 16 (org-heading t))
;; ;;                                    (0900 1100 1300 1500 1700))))

;; Display tags farther right
(setq org-agenda-tags-column -150)

;; ;; Use sticky agenda's so they persist
;; (setq org-agenda-sticky t)

;; ;; Agenda log mode items to display (closed and state changes by default)
;; (setq org-agenda-log-mode-items (quote (closed state)))

;; (setq org-agenda-span 'week)

;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda ()
	    (hl-line-mode 1)
	    (abbrev-mode 1)
	    )
          'append)

#+END_SRC

** Keywords like TODO / DONE etc

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "BLOCKED(b)" "NEXT(n)" "WORKING(w)" "SOMEDAY(s)" "|" "DONE(d)" "CANCELLED(c)")
	      )))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
	      ("WORKING" :foreground "cyan" :weight bold)
	      ("BLOCKED" :foreground "pink" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
	      ("CANCELLED" :foreground "gray" :weight bold)
	      )))

#+END_SRC

** Capture Templates

#+BEGIN_SRC emacs-lisp
;; Capture templates for: TODO tasks, Notes, appointments, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/scribble.org")
               "* TODO %?\n%U\n%a\n")
	      ("n" "note" entry (file "~/org/scribble.org")
               "* %? :note:\n%U\n%a\n")
	      ("z" "meeting" entry (file "~/org/scribble.org")
               "* %? :meeting:\n%U\n%a\n")
	      ("j" "journal" entry (function hs/org-file-by-date)
	       "* %U %? :journal:\n")
	      )))

#+END_SRC

** Refile Settings

#+BEGIN_SRC emacs-lisp

; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 2)
                                 (org-agenda-files :maxlevel . 2))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path 'file)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

#+END_SRC

** Modules

#+BEGIN_SRC emacs-lisp
; Enable habit tracking (and a bunch of other modules)
(setq org-modules (quote (org-bibtex
                          org-crypt
                          org-gnus
                          org-id
                          org-info
                          org-jsinfo
                          org-habit
                          org-inlinetask
                          org-irc
                          org-mew
                          org-mhe
                          org-protocol
                          org-rmail
                          org-vm
                          org-wl)))

; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 50)
(setq org-habit-show-all-today t)

(run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))

(global-auto-revert-mode t)

(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("0" . ignore)
                                      ("1" . ignore)
                                      ("2" . ignore)
                                      ("3" . ignore)
                                      ("4" . ignore)
                                      ("5" . ignore)
                                      ("6" . ignore)
                                      ("7" . ignore)
                                      ("8" . ignore)
                                      ("9" . ignore)

                                      ("a" . ignore)
                                      ("d" . ignore)
                                      ("i" progn
                                       (forward-char 1)
                                       (call-interactively 'org-insert-heading-respect-content))
                                      ("k" . org-kill-note-or-show-branches)
                                      ("l" . ignore)
                                      ("m" . ignore)
                                      ("r" . ignore)
                                      ("s" . org-save-all-org-buffers)
                                      ("w" . org-refile)
                                      ("x" . hs/org-schedule-today)
                                      ("y" . ignore)
                                      ("z" . org-add-note)

                                      ("A" . ignore)
                                      ("B" . ignore)
                                      ("E" . ignore)
                                      ("G" . ignore)
                                      ("H" . ignore)
                                      ("J" . org-clock-goto)
                                      ("K" . ignore)
                                      ("L" . ignore)
                                      ("M" . ignore)
                                      ("N" . org-narrow-to-subtree)
                                      ("Q" . ignore)
                                      ("R" . ignore)
                                      ("S" . ignore)
                                      ("V" . ignore)
                                      ("W" . widen)
                                      ("X" . ignore)
                                      ("Y" . ignore)
                                      ("Z" . ignore))))

(require 'org-protocol)

(setq require-final-newline t)

(setq org-export-with-timestamps nil)

(setq org-return-follows-link t)

(setq org-remove-highlights-with-change t)

(setq org-read-date-prefer-future 'time)

(setq org-list-demote-modify-bullet (quote (("+" . "-")
                                            ("*" . "-")
                                            ("1." . "-")
                                            ("1)" . "-")
                                            ("A)" . "-")
                                            ("B)" . "-")
                                            ("a)" . "-")
                                            ("b)" . "-")
                                            ("A." . "-")
                                            ("B." . "-")
                                            ("a." . "-")
                                            ("b." . "-"))))

(setq org-tags-match-list-sublevels t)

(setq org-agenda-persistent-filter t)

(add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp"))

(require 'org-mime)

(setq org-agenda-skip-additional-timestamps-same-entry t)

(setq org-table-use-standard-references (quote from))

(setq org-file-apps (quote ((auto-mode . emacs)
                            ("\\.mm\\'" . system)
                            ("\\.x?html?\\'" . system)
                            ("\\.pdf\\'" . system))))

; Overwrite the current window with the agenda
(setq org-agenda-window-setup 'current-window)

(setq org-clone-delete-id t)

(setq org-cycle-include-plain-lists t)

(setq org-src-fontify-natively t)

(setq org-startup-folded t)

(add-hook 'org-mode-hook
          '(lambda ()
             ;; Undefine C-c [ and C-c ] since this breaks my
             ;; org-agenda files when directories are include It
             ;; expands the files in the directories individually
             (org-defkey org-mode-map "\C-c[" 'undefined)
             (org-defkey org-mode-map "\C-c]" 'undefined)
             (org-defkey org-mode-map "\C-c;" 'undefined)
             (org-defkey org-mode-map "\C-c\C-x\C-q" 'undefined))
          'append)


(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0)

(setq org-catch-invisible-edits 'error)

(setq org-export-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

(setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                 ("/" italic "<i>" "</i>")
                                 ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                 ("=" org-code "<code>" "</code>" verbatim)
                                 ("~" org-verbatim "<code>" "</code>" verbatim))))

(setq org-use-sub-superscripts nil)

(setq org-odd-levels-only nil)

(setq org-startup-indented nil)

(run-at-time "00:59" 3600 'org-save-all-org-buffers)

(setq org-stuck-projects
      '("+project/-DONE" ("NEXT" "TODO") ()
        "\\<IGNORE\\>"))

#+END_SRC

** Custom Agenda Views

#+BEGIN_SRC emacs-lisp

(setq org-agenda-custom-commands
      (quote (
	      ("o" "Overview"
	       (
		(agenda ""
			((org-agenda-overriding-header (concat (hs/org-style-header "Overview") (hs/org-style-sub-header "Today")))
			    (org-agenda-span 'day)
			    (org-agenda-compact-blocks nil)))
		(tags "+sticky"
                      ((org-agenda-overriding-header (hs/org-style-sub-header "Sticky Notes"))
		       (org-agenda-compact-blocks t)
                       (org-tags-match-list-sublevels nil)))
		(todo "WORKING|NEXT|TODO|BLOCKED"
                      ((org-agenda-overriding-header (hs/org-style-sub-header "Upcoming Items"))
		       (org-agenda-compact-blocks t)
		       (org-agenda-skip-function '(org-agenda-skip-subtree-if 'notscheduled))
		       (org-agenda-prefix-format " %-20(let ((scheduled (org-get-scheduled-time (point)))) (if scheduled (format-time-string \"%d %b '%y\" scheduled) \"<sub>\")):  ")
		       (org-agenda-sorting-strategy '(scheduled-up time-up))))
		(tags-todo "-skip_unscheduled/WORKING|NEXT|TODO|BLOCKED"
                      ((org-agenda-overriding-header (hs/org-style-sub-header "Unscheduled Items"))
		       (org-agenda-compact-blocks t)
		       (org-agenda-skip-function '(org-agenda-skip-subtree-if 'scheduled))
		       (org-agenda-sorting-strategy '(todo-state-down priority-down))))
	       )
	      )
	      ("p" "Projects"
	       (
		(tags "+project"
                      ((org-agenda-overriding-header
			(concat (hs/org-style-header "Projects")
				(hs/org-style-sub-header "All Projects")))
		       (org-agenda-compact-blocks t)
                       (org-tags-match-list-sublevels nil)))
		(stuck ""
		       ((org-agenda-overriding-header (hs/org-style-sub-header "Projects at Rest"))
 		        (org-agenda-compact-blocks t)
			))
		
		)
	       )
	      ("z" "Meetings"
	       (
		(tags "+meeting"
                      ((org-agenda-overriding-header
			(hs/org-style-header "Meetings"))
		       (org-agenda-compact-blocks t)
                       (org-tags-match-list-sublevels nil)
		       (org-agenda-sorting-strategy '(scheduled-up))
		       (org-agenda-prefix-format
			"%-20(let ((scheduled (org-get-scheduled-time (point)))) (if scheduled (format-time-string \"(%b %d %Y)\" scheduled) \"()\"))"))) ) )
	      ("w" "Weekly Review"
	       agenda ""
	       (
                (org-agenda-span 7)
                (org-agenda-start-on-weekday 1)
		(org-deadline-warning-days 0)
                (org-agenda-start-with-log-mode '(closed))
		(org-agenda-log-mode-items (quote (closed state clock)))
		(org-agenda-archives-mode t)
		(org-agenda-overriding-header (hs/org-style-sub-header "Weekly Review"))
		(org-agenda-compact-blocks nil)
		(org-agenda-show-log t)
		))
	      ("n" "Notes" tags "note"
	       ((org-agenda-overriding-header (hs/org-style-header "Note Pointers"))
		(org-tags-match-list-sublevels t)))
	      ("Q" "Quick Lookup" tags "quick"
	       ((org-agenda-overriding-header (hs/org-style-header "Quick Lookup"))
		(org-tags-match-list-sublevels nil)))
	      ("s" "Pick and Finish!" todo "SOMEDAY"
               ((org-agenda-overriding-header (hs/org-style-header "Pick and Finish"))
                (org-tags-match-list-sublevels t)
		(org-agenda-sorting-strategy '(priority-down))))
	      ("j" "Journal" tags "journal"
	       ((org-agenda-overriding-header (hs/org-style-header "Journal Entries"))
		(org-tags-match-list-sublevels t)))
	      )))
#+END_SRC

** Clocking

#+BEGIN_SRC emacs-lisp

;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)

;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

(setq org-time-stamp-rounding-minutes (quote (1 1)))

(setq org-agenda-clock-consistency-checks
      (quote (:max-duration "4:00"
              :min-duration 0
              :max-gap 0
              :gap-ok-around ("4:00"))))

;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Agenda clock report parameters
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))

#+END_SRC

** Special Tags
#+BEGIN_SRC emacs-lisp
; Tags with fast selection keys
(setq org-tag-alist (quote (("read" . ?r)
                            ("note" . ?n)
			    ("quick" . ?q)
			    ("sticky" . ?s)
			    ("work" . ?w)
			    ("project" . ?p)
			    )))

; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))
#+END_SRC

** Archiving

#+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil)
(setq org-archive-location "~/org/archives/%s-archived::* Archived Tasks")

(setq org-alphabetical-lists t)
#+END_SRC

** Exporting

#+BEGIN_SRC emacs-lisp
;; Explicitly load required exporters
(require 'ox-html)
(require 'ox-latex)
(require 'ox-ascii)


; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")


(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (shell . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))

; Inline images in HTML instead of producting links to the image
(setq org-html-inline-images t)
; Do not use sub or superscripts - I currently don't need this functionality in my documents
(setq org-export-with-sub-superscripts nil)
; Use org.css from the norang website for export document stylesheets
(setq org-html-head-extra "<link rel=\"stylesheet\" href=\"http://doc.norang.ca/org.css\" type=\"text/css\" />")
(setq org-html-head-include-default-style nil)
; Do not generate internal css formatting for HTML exports
(setq org-export-htmlize-output-type (quote css))
; Export with LaTeX fragments
(setq org-export-with-LaTeX-fragments t)
; Increase default number of headings to export
(setq org-export-headline-levels 6)

(setq org-latex-listings t)

(setq org-html-xml-declaration (quote (("html" . "")
                                       ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                       ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))))

(setq org-export-allow-BIND t)

;; (require 'org-checklist)

(setq org-table-export-default-format "orgtbl-to-csv")

#+END_SRC


** Roam

#+BEGIN_SRC emacs-lisp
(use-package org-roam
   :ensure t
   :custom
   (org-roam-directory (file-truename "~/org/"))
   :bind (("C-c n l" . org-roam-buffer-toggle)
          ("C-c n f" . org-roam-node-find)
          ("C-c n g" . org-roam-graph)
          ("C-c n i" . org-roam-node-insert)
          ("C-c n c" . org-roam-capture)
          ;; Dailies
          ("C-c n j" . org-roam-dailies-capture-today))
   :config
   ;; If using org-roam-protocol
   (require 'org-roam-protocol))
(setq org-roam-v2-ack t)
(setq org-roam-graph-executable "/usr/local/bin/dot")

(setq org-roam-capture-templates '(("d" "default" plain "%?"
     :if-new (file+head "roam/%<%Y-%m-%d>-${slug}.org"
                        "#+title: ${title}\n")
     :unnarrowed t)))

#+END_SRC

** Roam UI
   Roam UI hasn't yet made to melpa which is why I have configured it
   as a submodule within the dot-emacs config. I should check maybe in
   6 months or so if it has madee it to melpa and whenever it does, I
   should remove the following block and simply use =use-package=.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/private/org-roam-ui")
(load-library "org-roam-ui")
#+END_SRC

*** TODO Check if [[https://github.com/org-roam/org-roam-ui][roam ui]] has made it to melpa      :skip_unscheduled:
    DEADLINE: <2022-02-15 Tue>

** [LIB] Org Mode Library Functions
   Custom defined function to reset org-agenda-files and also perform
   roam db sync.
   #+BEGIN_SRC emacs-lisp
      (defun hs/org-refresh()
	(interactive)
	(setq org-agenda-files (directory-files-recursively "~/org/" "\.org$"))
	(add-to-list 'org-agenda-files "~/.emacs.d/configuration.org")
	(org-roam-db-sync)
	)
   (defun hs/org-roamify()
	(interactive)
     (org-id-get-create)
     )
   (defun hs/org-roam-enable-ui()
	(interactive)
     (org-roam-ui-mode)
     )
   #+END_SRC

* Keybindings

** Generic Bindings

#+BEGIN_SRC emacs-lisp
;; HS minor mode
(global-set-key (kbd "C-c h s") 'hs-minor-mode)
(global-set-key (kbd "C-c -") 'hs-hide-block)
(global-set-key (kbd "C-c h -") 'hs-hide-all)
(global-set-key (kbd "C-c =") 'hs-show-block)
(global-set-key (kbd "C-c h =") 'hs-show-all)

;; White-space mode
(global-set-key (kbd "C-c W") 'whitespace-mode)

;; Comment lines
(global-set-key (kbd "C-c / /") 'comment-or-uncomment-region)
(global-set-key (kbd "C-c / *") 'comment-region)
(global-set-key (kbd "C-c * /") 'uncomment-region)

;; Org Mode
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c t") 'hs/org-schedule-today)
(global-set-key (kbd "C-c i") 'org-clock-in)
(global-set-key (kbd "C-c o") 'org-clock-out)
(global-set-key (kbd "C-c n r") 'hs/org-refresh)
(global-set-key (kbd "C-c n o") 'hs/org-roamify)
(global-set-key (kbd "C-c n u") 'hs/org-roam-enable-ui)


;; ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)

#+END_SRC

** Simplified Bindings for Org Mode
   Uncomment this block if you want to use simpler keybindings for
   Org mode.

#+BEGIN_SRC comment
(setq shift-select-mode t)
(setq org-support-shift-select t)

(global-set-key (kbd "<f1>") 'ibuffer)
(global-set-key (kbd "<f2>") 'delete-other-windows)
(global-set-key (kbd "M-t") 'org-ctrl-c-ctrl-c)
(global-set-key (kbd "M-s") 'org-schedule)
(global-set-key (kbd "M-d") 'org-deadline)
(global-set-key (kbd "M-a") 'org-agenda)
(global-set-key (kbd "M-c") 'org-capture)
(global-set-key (kbd "<f11>") 'org-clock-in)
(global-set-key (kbd "<f12>") 'org-clock-out)

#+END_SRC

* Misc Configuration

#+BEGIN_SRC emacs-lisp
;; make emacs use the clipboard
(setq x-select-enable-clipboard t)
(setq make-backup-files nil)
(put 'set-goal-column 'disabled nil)

;; Transparently open compressed files
(auto-compression-mode t)

;; Enable syntax highlighting for older Emacsen that have it off
(global-font-lock-mode t)

;; Save a list of recent files visited.
;; (recentf-mode 1)

;; Highlight matching parentheses when the point is on them.
(show-paren-mode 1)

(set-default 'indicate-empty-lines t)
(set-default 'imenu-auto-rescan t)

(add-hook 'text-mode-hook 'turn-on-auto-fill)

(defalias 'yes-or-no-p 'y-or-n-p)
(random t) ;; Seed the random-number generator

(set-face-attribute 'default nil :height 150)

#+END_SRC

* Server Starting
  ([[https://stackoverflow.com/questions/6397323/how-to-avoid-the-message-of-server-start-while-opening-another-emacs-session][Reference]])

#+BEGIN_SRC emacs-lisp
(require 'server)
(or (server-running-p)
    (server-start))

#+END_SRC

* Prettify

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
  "Beautify Org Checkbox Symbol"
  (push '("[ ]" .  "☐") prettify-symbols-alist)
  (push '("[X]" . "☑" ) prettify-symbols-alist)
  (push '("[-]" . "❍" ) prettify-symbols-alist)
  (prettify-symbols-mode)))

(defface org-checkbox-done-text
  '((t (:foreground "#71696A" :strike-through t)))
  "Face for the text part of a checked org-mode checkbox.")

(font-lock-add-keywords
 'org-mode
 `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
    1 'org-checkbox-done-text prepend))
 'append)
#+END_SRC
