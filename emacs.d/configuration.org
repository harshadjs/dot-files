#+TITLE: Emacs Configuration
#+AUTHOR: Harshad Shirwadkar
#+FILETAGS: config agenda

* Emacs Configuration                                         :project:
  :PROPERTIES:
  :ID:       7DD192D8-DA31-44C2-9290-6C9CEFF5EAEE
  :END:
  This is a [[id:07C51469-8108-475E-8A86-385AE8F3A94B][project]] itself.

* Emacs Debugging
  Turn this on if there's a need to debug emacs
#+BEGIN_SRC emacs-lisp
;;(setq debug-on-error 't)
#+END_SRC


* Library Functions
  
  This section captures all the library functions that are defined in
  my config.

** Capture Frame function

#+BEGIN_SRC emacs-lisp
(defun make-capture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (org-capture)
  (delete-other-windows)
  )
#+END_SRC

** C Indentation functions

#+BEGIN_SRC emacs-lisp
(defun hs/c-indent/config-indent-80andNoTrail()
  (setq whitespace-line-column 80) ;; limit line length
  (setq whitespace-style '(face lines-tail))
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (setq show-trailing-whitespace t)
  )

(defun hs/c-indent/config-indent-linux()
  (setq c-default-style "linux")
  ;; Use TABs of length of 8
  (setq indent-tabs-mode 1
	tab-width 8
	c-basic-offset 8)
  )
#+END_SRC

** Org Mode Functions

#+BEGIN_SRC emacs-lisp
(defun hs/org-goto-journal ()
  "Create an Org file with current time as name."
  (interactive)
  (find-file (format-time-string "~/pkm/journal/journal-%Y-%m.org")))

(defun hs/org-schedule-today ()
  "Schedule the current task to today."
  (interactive)
  (org-agenda-schedule 'nil (current-time)))

(defun hs/org-style-header (arg)
  "Stylize the header for org agenda."
  (concat
   (make-string (+ 2 (length arg)) ?=)
   "\n " arg " \n"
   (make-string (+ 2 (length arg)) ?=)
   "\n")
  )

(defun hs/org-style-sub-header (arg)
  "Stylize the header for org agenda."
  (concat "\n** " arg " **\n")
  )

(defun hs/org-roamify()
  (interactive)
  (org-id-get-create)
  )

(defun hs/org-roam-enable-ui()
  (interactive)
  (org-roam-ui-mode)
  )

#+END_SRC

* User Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Harshad Shirwadkar")
(setq user-mail-address "harshadshirwadkar@gmail.com")
#+END_SRC

* Basic Initial Configuration

#+BEGIN_SRC emacs-lisp
(setq package-check-signature 'nil)

(setq dotfiles-dir (file-name-directory
                    (or (buffer-file-name) load-file-name)))

;; Enable delete selection mode
(delete-selection-mode 1)

#+END_SRC

* Install Packages
** Generic Packages
  #+BEGIN_SRC emacs-lisp
  (defvar packages  '(
		      auto-complete
		      autopair
		      xcscope
		      gotham-theme
		      markdown-mode
		      company
		      ido-vertical-mode
		      org-mime
		      doom-themes
		      use-package
		      websocket
		      simple-httpd
		      org-super-agenda
		      org-roam-ui
		      org-ql
		      org-download
		      poet-theme
		      )
    )

  ;; I have disabled this automatic loading of org-roam from melpa for
  ;; some reason enabling org-roam using use-package (or melpa) is
  ;; resulting in org-roam-ui complaining that i'm using old version of
  ;; org-roam. After a bit of debugging, I found that it's some symbol
  ;; called org citations or something (search for citations in
  ;; org-roam-db.el file) was missing in my org-roam-db.el. So for now,
  ;; I am including org-roam directly from git in my private packages
  ;; folder. Until that gets resolved, this mode of enabling roam is
  ;; disabled.

  (add-to-list 'load-path "~/.emacs.d/private/org-roam/")
  (add-to-list 'load-path "~/.emacs.d/private/org-roam/extensions/")
  (setq org-roam-v2-ack t)
  (require 'org-roam)

  (when (>= emacs-major-version 24)
    (require 'package)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    )

  (when (not package-archive-contents) (package-refresh-contents))

  (dolist (p packages)
    (when (not (package-installed-p p))
      (package-refresh-contents)
      (package-install p)))

  (setq create-lockfiles nil)


#+END_SRC
** Google Internal Packages
#+BEGIN_SRC emacs-lisp
(defun require-google-specific-packages ()
  (require 'compilation-colorization) ;; colorizes output of (i)grep
  (require 'rotate-clients)           ;; google-rotate-client
  (require 'rotate-among-files)       ;; google-rotate-among-files
  (require 'googlemenu)               ;; handy Google menu bar
  (require 'p4-files)                 ;; transparent support for Perforce filesystem
  (require 'google3)                  ;; magically set paths for compiling google3 code
  (require 'google3-build)            ;; support for blaze builds
  )
#+END_SRC

* Themes
  I generally prefer loading dark themes. But there are times when
  light theme makes sense. So, instead of changing config everytime,
  just check for file existence while loading theme. Terminal is
  always dark though.

   #+BEGIN_SRC emacs-lisp
   (if (display-graphic-p)
       (if (file-exists-p "~/.emacs-light")
	   ;; (load-theme 'adwaita t)
	   ;; (load-theme 'wombat t))
	   (load-theme 'doom-nord-light t)
	   (load-theme 'wombat t))
     (load-theme 'doom-molokai t)
     )
   #+END_SRC

* Global auto-revert mode
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

* C Indentation
#+BEGIN_SRC emacs-lisp

;;; C indentation start ---------------
(add-hook 'c-mode-hook 'hs/c-indent/config-indent-linux)
(add-hook 'c-mode-common-hook 'hs/c-indent/config-indent-80andNoTrail)
(if (file-directory-p "/google/")
   (add-hook 'c-mode-common-hook '(lambda () (require 'google))))

;; For CamelCase Editing
(add-hook 'c-mode-common-hook
          (lambda () (subword-mode 1)))


#+END_SRC

* UI

#+BEGIN_SRC emacs-lisp
;;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (tooltip-mode -1)
  (mouse-wheel-mode t)
  (blink-cursor-mode -1))

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(ansi-color-for-comint-mode-on)

(setq visible-bell t
      echo-keystrokes 0.1
      font-lock-maximum-decoration t
      inhibit-startup-message t
      transient-mark-mode t
      color-theme-is-global t
      shift-select-mode nil
      mouse-yank-at-point t
      require-final-newline t
      truncate-partial-width-windows nil
      uniquify-buffer-name-style 'forward
      ediff-window-setup-function 'ediff-setup-windows-plain
      oddmuse-directory (concat dotfiles-dir "oddmuse")
      xterm-mouse-mode t
      save-place-file (concat dotfiles-dir "places"))

(add-to-list 'safe-local-variable-values '(lexical-binding . t))
(add-to-list 'safe-local-variable-values '(whitespace-line-column . 80))

(set-face-background 'vertical-border "white")
(set-face-foreground 'vertical-border "white")

;; Disable status and header lines for cleaner appearance
(setq-default header-line-format nil)
(setq-default mode-line-format nil)

;; Disabel Fringes
(set-fringe-style 0)
#+END_SRC

* [[https://www.emacswiki.org/emacs/WinnerMode][Winner Mode]]
** Info
   This mode allows me to undo the window configuration.
** Configuration
#+BEGIN_SRC emacs-lisp
    (when (fboundp 'winner-mode)
      (winner-mode 1))
#+END_SRC

* Scrolling
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse~
(setq scroll-conservatively 100)
#+END_SRC

* Line and Column Numbers
** Info
   Enable Line Numbers and Column Numbers. This is enabled by three
   modes:
   - Line number mode: shows line numbers above mini-buffer
   - Column number mode: shows column numbers above mini-buffer
   - Linum mode: shows line numbers on the left hand side of the
     buffer
** Configuration
#+BEGIN_SRC emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
(autoload 'linum-mode "linum" "toggle line numbers on/off" t)
(if (display-graphic-p)
  (setq linum-format " %d")
  (setq linum-format "%4d | ")
  )

(global-linum-mode 0)
#+END_SRC    

* [[https://github.com/joaotavora/autopair][Autopair Mode]]

** Information from the Page

   Autopair is an extension to the Emacs text editor that
   automatically pairs braces and quotes:

   - Opening braces/quotes are autopaired;
   - Closing braces/quotes are autoskipped;
   - Backspacing an opening brace/quote autodeletes its pair.
   - Newline between newly-opened brace pairs open an extra indented
     line.

   Autopair works well across all Emacs major-modes, deduces from the
   language's syntax table which characters to pair, skip or
   delete. It should work even with extensions that redefine such
   keys. It also works with YASnippet, another package I maintain.

** SOMEDAY Use electric-pair mode instead of auto-pair mode

** Configuration

    #+BEGIN_SRC emacs-lisp
(require 'autopair)
(autopair-global-mode)
(setq autopair-autowrap t)
    #+END_SRC

* [[https://github.com/auto-complete/auto-complete][Auto-Complete Mode]]
** Information
   Auto-Complete is an intelligent auto-completion extension for
   Emacs. It extends the standard Emacs completion interface and
   provides an environment that allows users to concentrate more on
   their own work.
** Configurataion
   #+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories (concat dotfiles-dir "/extensions/auto-complete/ac-dict"))
(ac-config-default)
   #+END_SRC

* [[https://github.com/dkogan/xcscope.el][Cscope]]
*** Information
    The main cscope package
*** Config
    #+BEGIN_SRC emacs-lisp
(require 'xcscope)
    #+END_SRC
*** Key Bindings
    #+BEGIN_SRC emacs-lisp
;; Cscope
(global-set-key (kbd "\C-c s s") 'cscope-find-this-symbol)
(global-set-key (kbd "\C-c s d") 'cscope-find-global-definition)
(global-set-key (kbd "\C-c s g") 'cscope-find-global-definition)
(global-set-key (kbd "\C-c s G") 'cscope-find-global-definition-no-prompting)
(global-set-key (kbd "\C-c s c") 'cscope-find-functions-calling-this-function)
(global-set-key (kbd "\C-c s C") 'cscope-find-called-functions)
(global-set-key (kbd "\C-c s t") 'cscope-find-this-text-string)
(global-set-key (kbd "\C-c s e") 'cscope-find-egrep-pattern)
(global-set-key (kbd "\C-c s f") 'cscope-find-this-file)
(global-set-key (kbd "\C-c s i") 'cscope-find-files-including-file)
;; --- (The '---' indicates that this line corresponds to a menu separator.)
(global-set-key (kbd "\C-c s b") 'cscope-display-buffer)
(global-set-key (kbd "\C-c s B") 'cscope-display-buffer-toggle)
(global-set-key (kbd "\C-c s n") 'cscope-next-symbol)
(global-set-key (kbd "\C-c s N") 'cscope-next-file)
(global-set-key (kbd "\C-c s p") 'cscope-prev-symbol)
(global-set-key (kbd "\C-c s P") 'cscope-prev-file)
(global-set-key (kbd "\C-c s u") 'cscope-pop-mark)
;; ---
(global-set-key (kbd "\C-c s a") 'cscope-set-initial-directory)
(global-set-key (kbd "\C-c s A") 'cscope-unset-initial-directory)
;; ---
(global-set-key (kbd "\C-c s L") 'cscope-create-list-of-files-to-index)
(global-set-key (kbd "\C-c s I") 'cscope-index-files)
(global-set-key (kbd "\C-c s E") 'cscope-edit-list-of-files-to-index)
(global-set-key (kbd "\C-c s W") 'cscope-tell-user-about-directory)
(global-set-key (kbd "\C-c s S") 'cscope-tell-user-about-directory)
(global-set-key (kbd "\C-c s T") 'cscope-tell-user-about-directory)
(global-set-key (kbd "\C-c s D") 'cscope-dired-directory)
#+END_SRC

* [[https://www.emacswiki.org/emacs/HippieExpand][Hippie Expand Mode]]
** Information

   HippieExpand looks at the word before point and tries to expand it
   in various ways including expanding from a fixed list (like
   `‘expand-abbrev’’), expanding from matching text found in a buffer
   (like `‘dabbrev-expand’’) or expanding in ways defined by your own
   functions. Which of these it tries and in what order is controlled
   by a configurable list of functions.

** Configuration
  #+BEGIN_SRC emacs-lisp
;; Hippie expand: at times perhaps too hip
(delete 'try-expand-line hippie-expand-try-functions-list)
(delete 'try-expand-list hippie-expand-try-functions-list)
  #+END_SRC

* [[https://www.emacswiki.org/emacs/InteractivelyDoThings][Ido Mode]]

** Info

   The ido.el package by KimStorm lets you interactively do things
   with buffers and files. As an example, while searching for a file
   with C-x C-f, ido can helpfully suggest the files whose paths are
   closest to your current string, allowing you to find your files
   more quickly.

** Config
  
#+BEGIN_SRC emacs-lisp
;; ido-mode is like magic pixie dust!
(ido-mode t)
(setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess
        ido-max-prospects 10)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)

#+END_SRC

* [[https://github.com/creichert/ido-vertical-mode.el][Ido Vertical Mode]]
   #+BEGIN_SRC emacs-lisp
(ido-vertical-mode)
(setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
   #+END_SRC


* File Extension to Modes Mapping
#+BEGIN_SRC emacs-lisp
;; Associate modes with file extensions
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.js\\(on\\)?$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.xml$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC

* Diff Mode
#+BEGIN_SRC emacs-lisp
;; Default to unified diffs
(setq diff-switches "-u")

(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))
#+END_SRC

* Platform Specific Stuff
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  ;; Work around a bug on OS X where system-name is FQDN
  (setq system-name (car (split-string system-name "\\."))))

#+END_SRC

* Org Mode Config

** General Config
#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'org-mouse)
(require 'org-protocol)
(require 'org-mime)
(require 'org-download)

(setq org-modules (quote (
                          org-id
                          org-habit
                          org-inlinetask
                          )))

(setq org-startup-with-inline-images t)

(setq org-directory "~/pkm")
(setq org-default-notes-file "~/pkm/inbox.org")
(setq-default org-download-image-dir "~/pkm/data")

(setq org-use-fast-todo-selection t)
(setq org-use-speed-commands t)

(setq org-treat-S-cursor-todo-selection-as-state-change nil)
(setq org-fontify-done-headline t)

; Set default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

; global Effort estimate values
; global STYLE property values for completion
(setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))
(setq org-enforce-todo-dependencies t)
(setq org-startup-indented nil)
(setq org-cycle-separator-lines 1)
(setq org-blank-before-new-entry (quote ((heading)
                                         (plain-list-item . auto))))
(setq org-insert-heading-respect-content nil)
(setq org-special-ctrl-a/e t)
(setq org-special-ctrl-k t)
(setq org-yank-adjusted-subtrees t)
(setq org-id-method (quote uuidgen))
(setq org-deadline-warning-days 30)
(setq org-schedule-warning-days 30)

; Use the current window for C-c ' source editing
(setq org-src-window-setup 'current-window)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

;;(setq org-completion-use-ido t)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

(setq org-return-follows-link t)
(setq org-read-date-prefer-future 'time)
(setq org-tags-match-list-sublevels t)
(setq org-agenda-persistent-filter t)
(setq org-agenda-skip-additional-timestamps-same-entry t)
(setq org-table-use-standard-references (quote from))

; Overwrite the current window with the agenda
(setq org-agenda-window-setup 'current-window)
(setq org-clone-delete-id t)
(setq org-cycle-include-plain-lists t)
(setq org-src-fontify-natively t)
(setq org-startup-folded t)

(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0)

(setq org-catch-invisible-edits 'error)

(setq org-export-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

(setq org-use-sub-superscripts nil)
(setq org-odd-levels-only nil)

(setq org-stuck-projects
      '("+project/-DONE" ("NEXT" "TODO") ()
        "\\<IGNORE\\>"))

(setq org-speed-commands-user (quote (("0" . ignore)
                                      ("1" . ignore)
                                      ("2" . ignore)
                                      ("3" . ignore)
                                      ("4" . ignore)
                                      ("5" . ignore)
                                      ("6" . ignore)
                                      ("7" . ignore)
                                      ("8" . ignore)
                                      ("9" . ignore)

                                      ("a" . ignore)
                                      ("d" . ignore)
                                      ("i" progn
                                       (forward-char 1)
                                       (call-interactively 'org-insert-heading-respect-content)

                                      ("k" . org-kill-note-or-show-branches)
                                      ("l" . ignore)
                                      ("m" . ignore)
                                      ("r" . ignore)
                                      ("s" . org-save-all-org-buffers)
                                      ("w" . org-refile)
                                      ("x" . hs/org-schedule-today)
                                      ("y" . ignore)
                                      ("z" . org-add-note)

                                      ("A" . ignore)
                                      ("B" . ignore)
                                      ("E" . ignore)
                                      ("G" . ignore)
                                      ("H" . ignore)
                                      ("J" . org-clock-goto)
                                      ("K" . ignore)
                                      ("L" . ignore)
                                      ("M" . ignore)
                                      ("N" . org-narrow-to-subtree)
                                      ("Q" . ignore)
                                      ("R" . ignore)
                                      ("S" . ignore)
                                      ("V" . ignore)
                                      ("W" . widen)
                                      ("X" . ignore)
                                      ("Y" . ignore)
                                      ("Z" . ignore)))))

(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC

** Special Links for Google
#+BEGIN_SRC emacs-lisp
(org-add-link-type "l" 'org-l-open)

(defun org-l-open (url)
  "Open the google link"
  (browse-url (concat "http://" url)))

#+END_SRC

** Logging
   Logging of entries. On marking entries as done, also record the
   state change by mmodifying =org-log-note-headings= variable to
   reflect the state change. This allows such state changes to be
   tracked in weekly review.
#+BEGIN_SRC emacs-lisp
(setq org-log-done (quote note))
(setq org-log-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)
#+END_SRC

** Tags excluded from inheritance
#+BEGIN_SRC emacs-lisp
(setq org-tags-exclude-from-inheritance '("travel" "project"))
#+END_SRC

** Keywords like TODO / DONE etc

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "BLOCKED(b)" "NEXT(n)" "WORKING(w)" "SOMEDAY(s)" "|" "DONE(d)" "CANCELLED(c)" "OBSOLETE(o)" "DONE-IMPORTANT(x)")
	      )))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
	      ("WORKING" :foreground "cyan" :weight bold)
	      ("BLOCKED" :foreground "pink" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("DONE" :foreground "yellow" :weight bold)
	      ("CANCELLED" :foreground "gray" :weight bold)
	      )))

#+END_SRC

** Capture Templates

#+BEGIN_SRC emacs-lisp
;; Capture templates for: TODO tasks, Notes, appointments, meetings, and org-protocol
(defun hs/org-capture-maybe-create-id ()
  (when (org-capture-get :create-id)
    (org-id-get-create)))
(add-hook 'org-capture-mode-hook #'hs/org-capture-maybe-create-id)

(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/pkm/inbox.org")
               "* TODO %?\n%U\n%a\n")
	      ("j" "journal" entry (function hs/org-goto-journal)
               "* %U %?\n")
	      ("r" "reminder" entry (file "~/pkm/reminders.org")
               "* TODO %?\nReminder captured on %U.\n(Add a scheduled / deadline date)\n")	      
	      )))

#+END_SRC

** Refile Settings

#+BEGIN_SRC emacs-lisp

; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 2)
                                 (org-agenda-files :maxlevel . 2))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path 'file)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

#+END_SRC

** Agenda Configuration
*** Agenda Files Configuration
**** Default configuration
#+BEGIN_SRC emacs-lisp
;; The buffer you put this code in must have lexical-binding set to t!
;; See the final configuration at the end for more details.

(defun hs/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun hs/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (hs/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun hs/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (hs/org-roam-list-notes-by-tag "agenda")))

;; Build the agenda list the first time for the session
(hs/org-roam-refresh-agenda-list)

(add-to-list 'org-agenda-files "~/.emacs.d/configuration.org")
(add-to-list 'org-agenda-files "~/pkm/nodes/inbox.org")
(add-to-list 'org-agenda-files "~/pkm/nodes/habits.org")
(add-to-list 'org-agenda-files "~/pkm/nodes/reminders.org")

#+END_SRC

**** View nodes only configuration
     THIS CONFIG SHOULD NOT BE ENABLED BY DEFAULT.
     
     This is a config that should only be enabled to see if there are
     any task related items present in nodes/ directory. If such items
     are present, either move them to inbox.org or move them to
     appropriate project under pkm/projects.
#+BEGIN_SRC comment
(setq org-agenda-files (directory-files-recursively "~/pkm/" "\.org$"))
(add-to-list 'org-agenda-files "~/.emacs.d/configuration.org")
#+END_SRC
     

*** Agenda Misc Configuration
#+BEGIN_SRC emacs-lisp
(setq org-agenda-sorting-strategy '(time-up))

(setq org-agenda-tags-column -150)

(setq org-agenda-start-with-log-mode t)

(add-hook 'org-agenda-mode-hook
          '(lambda ()
	    (hl-line-mode 1)
	    (abbrev-mode 1)
	    )
          'append)

#+END_SRC

*** Custom Agenda Views

#+BEGIN_SRC emacs-lisp
(org-super-agenda-mode)

(setq org-agenda-block-separator nil)
(setq org-agenda-span 'day)
(setq org-habit-show-habits t)
(setq org-habit-graph-column 50)
(setq org-habit-show-all-today t)
(setq org-super-agenda-groups '(
				(:name "Habits" :habit t)
				(:name "Today" :time-grid t :scheduled today :date today)
				(:name "Overdue" :scheduled past)
				(:name "Upcoming" :scheduled future :deadline future)
				)
      )

(defun hs/org-get-scheduled-or-deadline ()
    (let (
	  (scheduled (org-get-scheduled-time (point)))
	  (deadline (org-get-deadline-time (point))))
      (if scheduled (format-time-string "%d %b %Y" scheduled)
	(if deadline (format-time-string "%d %b %Y" deadline) "<sub>"))
      )
    )

(setq org-agenda-custom-commands
      '(("o" "Overview"
	 (
	  (alltodo "" (
		       (org-agenda-overriding-header (hs/org-style-header "Overview"))
		       (org-super-agenda-groups '(
						  (:name "** Unprocessed **\n" :and (:scheduled nil :deadline nil))
						  (:name "** Working **\n" :todo "WORKING")
						  (:name "** Next **\n" :todo "NEXT")
						  (:name "** Blocked **\n" :todo "BLOCKED")
						  (:name "** Someday **\n" :todo "SOMEDAY")
						  (:discard (:anything t))
						  ))
		       )
		   )
	  (alltodo "" (
		       (org-agenda-overriding-header "")
		       (org-agenda-prefix-format " %-20(hs/org-get-scheduled-or-deadline)  ")
		       (org-super-agenda-groups '(
						  (:name "** Habits **\n" :habit t)
						  (:name "** Scheduled **\n" :scheduled t)
						  (:discard (:anything t))
						  ))
		       )
		   )
	  (alltodo "" (
		       (org-agenda-overriding-header "")
		       (org-agenda-prefix-format " %-20(hs/org-get-scheduled-or-deadline)  ")
		       (org-super-agenda-groups '(
						  (:name "** Deadlines **\n" :deadline t)
						  (:discard (:anything t))
						  ))
		       )
		   )
	  )
	 )
	("d" "Detailed Agenda View"
	 (
	  (agenda "" (
		      (org-agenda-overriding-header (hs/org-style-header "Detailed Agenda View"))
		      (org-super-agenda-groups '(
						 (:name "Habits" :habit t)
						 (:name "Today" :time-grid t :scheduled today :date today)
						 (:name "Overdue" :scheduled past)
						 (:name "Upcoming" :scheduled future :deadline future)
						 )
					       )
		      )
		  )
	  (alltodo "" (
		       (org-agenda-overriding-header (hs/org-style-sub-header "Task Groups"))
		       (org-agenda-prefix-format " %-20(hs/org-get-scheduled-or-deadline)  ")
		       (org-super-agenda-groups '(
						  (:name "Scheduled >\n" :scheduled t)
						  (:name "Deadlines >\n" :deadline t)
						  (:name "Working >\n" :todo "WORKING")
						  (:name "Next >\n" :todo "NEXT")
						  (:name "Blocked >\n" :todo "BLOCKED")
						  (:name "Someday >\n" :todo "SOMEDAY")
						  (:name "Unprocessed TODOs >\n" :todo "TODO")
						  ))
		       )
		   )
	  )
	 )	
	)
      )
#+END_SRC

** Clocking

#+BEGIN_SRC emacs-lisp

;; Resume clocking task when emacs is restarted
;; (org-clock-persistence-insinuate)

;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
;; (setq org-clock-persist t)
;; Do not prompt to resume an active clock
;; (setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
;; (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
;; (setq org-clock-report-include-clocking-task t)

;; (setq org-time-stamp-rounding-minutes (quote (1 1)))

;;(setq org-agenda-clock-consistency-checks
;;      (quote (:max-duration "4:00"
;;              :min-duration 0
;;              :max-gap 0
;;              :gap-ok-around ("4:00"))))

;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
;; (setq org-clock-out-remove-zero-time-clocks t)

;; Agenda clock report parameters
;; (setq org-agenda-clockreport-parameter-plist
;;      (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))

#+END_SRC

** Special Tags
#+BEGIN_SRC emacs-lisp
; Tags with fast selection keys
(setq org-tag-alist (quote (("read" . ?r)
                            ("note" . ?n)
			    ("quick" . ?q)
			    ("sticky" . ?s)
			    ("work" . ?w)
			    ("project" . ?p)
			    )))

; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))
#+END_SRC

** Archiving

#+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil)
(setq org-archive-location "~/pkm/archives/%s-archived::* Archived Tasks")

(setq org-alphabetical-lists t)
#+END_SRC

** Roam

#+BEGIN_SRC emacs-lisp    
(setq org-roam-directory (file-truename "~/pkm/"))
(setq org-roam-dailies-directory "snippets")
(setq org-roam-graph-executable "/usr/local/bin/dot")

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %T %?"
         :if-new (file+head "%<%Y-%W>.org"
                            "#+title: %<%Y, Week %W>\n#+filetags: weekly agenda\n"))))

(setq org-roam-capture-templates
      '(
	("w" "work" plain "%?"
	 :if-new (file+head "~/pkm/nodes/work/${slug}.org"
                            "#+title: ${title}\n#+timestamp: %T\n#+filetags: work\n")
	 :unnarrowed t :immediate-finish t)
	("p" "personal" plain "%?"
	 :if-new (file+head "~/pkm/nodes/personal/${slug}.org"
                            "#+title: ${title}\n#+timestamp: %T\n#+filetags: personal\n")
	 :unnarrowed t :immediate-finish t)
	("x" "work/project" plain "%?"
	 :if-new (file+head "~/pkm/work/projects/${slug}.org"
                            "#+title: ${title}\n#+timestamp: %T\n#+filetags: work project agenda\n")
	 :unnarrowed t :immediate-finish t)
	("y" "personal/project" plain "%?"
	 :if-new (file+head "~/pkm/personal/projects/${slug}.org"
                            "#+title: ${title}\n#+timestamp: %T\n#+filetags: personal project agenda\n")
	 :unnarrowed t :immediate-finish t)
      ))

(global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)
(global-set-key (kbd "C-c n f") 'org-roam-node-find)
(global-set-key (kbd "C-c n i") 'org-roam-node-insert)
(global-set-key (kbd "C-c n c") 'org-roam-capture)
(global-set-key (kbd "C-c n s") 'org-roam-db-sync)

(global-set-key (kbd "C-c n t") 'org-roam-dailies-goto-today)
(global-set-key (kbd "C-c n d") 'org-roam-dailies-goto-date)

(global-set-key (kbd "C-c n o") 'hs/org-roamify)
(global-set-key (kbd "C-c n j") 'hs/org-goto-journal)
(global-set-key (kbd "C-c n r") 'hs/org-roam-refresh-agenda-list)

(org-roam-db-autosync-mode)

;; Use helm package for org-roam completions, these are awesome!
(use-package helm :ensure t :config (helm-mode))
#+END_SRC

** Roam buffer
#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.33)
               (window-parameters . ((no-other-window . t)
                                     (no-delete-other-windows . t)))))
(setq org-roam-mode-section-functions
      (list #'org-roam-backlinks-section
            #'org-roam-reflinks-section
            #'org-roam-unlinked-references-section
            ))
#+END_SRC

** Roam UI
#+BEGIN_SRC emacs-lisp

;;(add-to-list 'load-path "~/.emacs.d/private/org-roam-ui")
;;(load-library "org-roam-ui")

(global-set-key (kbd "C-c n u") 'org-roam-ui-open)
(global-set-key (kbd "C-c n z") 'org-roam-ui-node-zoom)
(global-set-key (kbd "C-c n n") 'org-roam-ui-node-local)

#+END_SRC


** Prettify

 #+BEGIN_SRC emacs-lisp
 (add-hook 'org-mode-hook (lambda ()
   "Beautify Org Checkbox Symbol"
   (push '("[ ]" .  "☐") prettify-symbols-alist)
   (push '("[X]" . "☑" ) prettify-symbols-alist)
   (push '("[-]" . "❍" ) prettify-symbols-alist)
   (prettify-symbols-mode)))

 (defface org-checkbox-done-text
   '((t (:foreground "#71696A" :strike-through t)))
   "Face for the text part of a checked org-mode checkbox.")

 (font-lock-add-keywords
  'org-mode
  `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
     1 'org-checkbox-done-text prepend))
  'append)
 #+END_SRC

* Keybindings

** Generic Bindings

#+BEGIN_SRC emacs-lisp
;; HS minor mode
(global-set-key (kbd "C-c h s") 'hs-minor-mode)
(global-set-key (kbd "C-c -") 'hs-hide-block)
(global-set-key (kbd "C-c h -") 'hs-hide-all)
(global-set-key (kbd "C-c =") 'hs-show-block)
(global-set-key (kbd "C-c h =") 'hs-show-all)

;; White-space mode
(global-set-key (kbd "C-c W") 'whitespace-mode)

;; Comment lines
(global-set-key (kbd "C-c / /") 'comment-or-uncomment-region)
(global-set-key (kbd "C-c / *") 'comment-region)
(global-set-key (kbd "C-c * /") 'uncomment-region)

;; Org Mode
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c t") 'hs/org-schedule-today)
(global-set-key (kbd "C-c i") 'org-clock-in)
(global-set-key (kbd "C-c o") 'org-clock-out)

;; ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)

#+END_SRC

** Simplified Bindings for Org Mode
   Uncomment this block if you want to use simpler keybindings for
   Org mode.

#+BEGIN_SRC comment
(setq shift-select-mode t)
(setq org-support-shift-select t)

(global-set-key (kbd "<f1>") 'ibuffer)
(global-set-key (kbd "<f2>") 'delete-other-windows)
(global-set-key (kbd "M-t") 'org-ctrl-c-ctrl-c)
(global-set-key (kbd "M-s") 'org-schedule)
(global-set-key (kbd "M-d") 'org-deadline)
(global-set-key (kbd "M-a") 'org-agenda)
(global-set-key (kbd "M-c") 'org-capture)
(global-set-key (kbd "<f11>") 'org-clock-in)
(global-set-key (kbd "<f12>") 'org-clock-out)

#+END_SRC

* Misc Configuration

#+BEGIN_SRC emacs-lisp
;; make emacs use the clipboard
(setq x-select-enable-clipboard t)
(setq make-backup-files nil)
(put 'set-goal-column 'disabled nil)

;; Transparently open compressed files
(auto-compression-mode t)

;; Enable syntax highlighting for older Emacsen that have it off
(global-font-lock-mode t)

;; Save a list of recent files visited.
;; (recentf-mode 1)

;; Highlight matching parentheses when the point is on them.
(show-paren-mode 1)

(set-default 'indicate-empty-lines t)
(set-default 'imenu-auto-rescan t)

(add-hook 'text-mode-hook 'turn-on-auto-fill)

(defalias 'yes-or-no-p 'y-or-n-p)
(random t) ;; Seed the random-number generator

(set-face-attribute 'default nil :height 150)

#+END_SRC

* Server Starting
  ([[https://stackoverflow.com/questions/6397323/how-to-avoid-the-message-of-server-start-while-opening-another-emacs-session][Reference]])

#+BEGIN_SRC emacs-lisp
(require 'server)
(or (server-running-p)
    (server-start))
#+END_SRC


